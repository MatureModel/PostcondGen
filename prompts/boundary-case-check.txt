We will give you the code context, function stub and natural language specification (in the form of a code comment) for a specific function.
Please write symbolic post-conditions for the function using assert statements.
Please adhere to the following guidelines:
1. The post-conditions MUST be "Boundary Case Check", meaning your post-condition should verify the correctness of the return value in boundary input cases.
2. When writing the post-conditions, only use the function's input parameters and a hypothetical return value variable, which we will assume is stored in a variable named return_val.
3. If the post-condition calls any function external to the program context, they should only be those from the functional subset of Python. By this, we mean functions that are pure (i.e., no side effects) such as len(), round(), abs() and so on.
4. Avoid using logical operators "and" or "else" clauses in the assertion. Simplify the expression by breaking it down into smaller, more manageable parts.
5. Consider common boundary cases, such as empty string, empty list, list with one single element, zeros, negative numbers and so on.

The format of your answer SHOULD be:
* [BOUNDARY CASES]:
possible boundary cases for the function
* [POST-CONDITIONS]:
```python
list of assert statements for post-conditions
```

Write post-conditions for [product_list].
* [CODE CONTEXT, FUNCTION STUB, AND CODE COMMENT]:
def product_list(l: list):
    """Return the product of all the elements in the list.
    >>> product_list([1, 2, 3])
    6
    >>> product_list([5, 3, -5, 2, -3, 3, 9])
    12150
    """
* [BOUNDARY CASES]:
1. empty input list
2. list with one single element
* [POST-CONDITIONS]:
```python
# Boundary Cases Check
if not l:
    assert return_val == 1

if len(l) == 1:
    assert return_val == l[0]
```

Write post-conditions for [{{{function_name}}}].
* [CODE CONTEXT, FUNCTION STUB, AND CODE COMMENT]:
{{{natural_language}}}
* [BOUNDARY CASES]: